# load scipting addition on startup, no password
# yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
# sudo yabai --load-sa


default_padding=12

# global settings
yabai_configs='                                 
    mouse_follows_focus          off            
    focus_follows_mouse          off            
    window_origin_display        default        
    window_placement             second_child   
    window_topmost               off            
    window_shadow                on       
    window_opacity_duration      0.0            
    active_window_opacity        1.0            
    normal_window_opacity        0.90           
    window_opacity               off            
    insert_feedback_color        0xffd75f5f     
    active_window_border_color   0xff775759     
    normal_window_border_color   0xff555555     
    window_border_width          4              
    window_border_radius         12             
    window_border_blur           off            
    window_border_hidpi          on             
    window_border                off            
    split_ratio                  0.50           
    split_type                   auto           
    auto_balance                 off            
    top_padding                  12             
    bottom_padding               12             
    window_gap                   06             
    layout                       bsp            
    mouse_modifier               fn             
    mouse_action1                move           
    mouse_action2                resize         
    mouse_drop_action            swap'
    
yabai -m config $(echo $yabai_configs)

# floating apps rules
yabai -m rule --add app="^Free Download Manager$" manage=off
yabai -m rule --add app="^Stats$" manage=off
yabai -m rule --add app="^iTerm2$" manage=off
yabai -m rule --add app="^Activity Monitor$" manage=off
yabai -m rule --add app="^NordVPN$" manage=off

# configure todoist quick add
yabai -m rule --add app="^Todoist$" title="^Quick Add$" manage=off
yabai -m rule --add app="^Microsoft Teams$" title="^Microsoft Teams Notification$" manage=off

## touchid window floating
yabai -m signal --add event=window_created app="^Touch ID$" action="yabai -m window --toggle float;"


####
## create number of spaces
####

# create up to 4 spaces on startup
num_spaces=$(yabai -m query --spaces | jq 'length')
if [[ $num_spaces -lt 4 ]]; then
    for ((i=$num_spaces+1; i<=4; i++)); do
        yabai -m space --create
    done
fi

####
## wide screen config
####
wide_display_found=false

# Check if any of the connected displays are wide
display_widths=$(yabai -m query --displays | jq '.[] | .frame.w')
display_width=$(yabai -m query --displays --display | jq '.frame.w')
display_height=$(yabai -m query --displays --display | jq '.frame.h')

for width in $display_widths; do
    if ((width >= 3440)); then
        wide_display_found=true
        break
    fi
done

####
## window position and size
####

# Function to resize window
resize_window() {
    local app="$1"
    local margin_left="$2"
    local margin_top="$3"
    local window_width="$4"
    local window_height="$5"
    local event="$6"

    yabai -m signal --add event="$event" app="$app" action="yabai -m window --toggle float;\
    yabai -m window --move abs:$margin_left:$margin_top;\
    yabai -m window --resize abs:$window_width:$window_height"
}


####
## default iTerm2 position and size
#### 
# calculate the margins and dimensions as integers
iterm_margin_left=$(echo "$display_width * 0.3 / 1" | bc)
iterm_margin_top=$(echo "$display_height * 0.8 / 1" | bc)
iterm_margin_right=$(echo "$display_width * 0.3 / 1" | bc)

iterm_window_width=$(echo "$display_width - $iterm_margin_left - $iterm_margin_right" | bc)
iterm_window_height=$(echo "$display_height - $iterm_margin_top" | bc)

# set the default iTerm2 position and size
resize_window "^iTerm2$" "$iterm_margin_left" "$iterm_margin_top" "$iterm_window_width" "$iterm_window_height" "window_created"

# set the iTerm2 position and size when focused
resize_window "^iTerm2$" "$iterm_margin_left" "$iterm_margin_top" "$iterm_window_width" "$iterm_window_height" "window_focused"


####
## StrongBox position and size
#### 
# calculate the margins and dimensions as integers
strongbox_margin_left=$(echo "($display_width - $window_width * 1.3) / 2" | bc)
strongbox_margin_top=$(echo "$margin_top - $window_height" | bc)
strongbox_margin_right=$(echo "($display_width - $window_width * 1.3) / 2" | bc)

strongbox_window_width=$(echo "$window_width * 1.3" | bc)
strongbox_window_height=$(echo "$window_height * 2" | bc)

# Set the StrongBox position and size and make it float by default
resize_window "^Strongbox$" "$strongbox_margin_left" "$(($display_height - $strongbox_window_height - $window_height))" "$strongbox_window_width" "$strongbox_window_height" "window_created"

####
## display dynamic padding
####

function configure_display() {
    if $wide_display_found; then
        # Configuration specific to wide screen monitors
        yabai -m config layout bsp
        yabai -m config window_placement east


        # Add padding to windows when there is only 1 or 2 windows visible
        num_windows=$(yabai -m query --windows --space | jq '[.[] | select((.["is-visible"] == true) and (.["is-floating"] == false) and (.["id"] | tonumber != 0))] | length')
        if ((num_windows == 1)); then
            yabai -m config left_padding $(echo "$display_width * 0.6 / 2" | bc)
            yabai -m config right_padding $(echo "$display_width * 0.6 / 2" | bc)
              # Allow dynamic padding adjustment
            yabai -m signal --add event=window_resized action="configure_display"
            yabai -m signal --add event=window_moved action="configure_display"
            yabai -m signal --add event=window_floated action="configure_display"
        elif ((num_windows == 2)); then
            yabai -m config left_padding $(echo "$display_width * 0.3 / 2" | bc)
            yabai -m config right_padding $(echo "$display_width * 0.3 / 2" | bc)
        else
            yabai -m config left_padding $default_padding
            yabai -m config right_padding $default_padding
        fi

    else
        # Configuration specific to non-wide screen monitors
        $yabai_config
        yabai -m config left_padding $default_padding
        yabai -m config right_padding $default_padding        
    fi

}


# Perform configure_display when a window is created
yabai -m signal --add event=window_created action="configure_display"
# Resize event listener to update display configuration
yabai -m signal --add event=window_resized action="configure_display"


echo "yabai configuration loaded.."